
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "AppToInstall": {
      "type": "string",
      "allowedValues": [
        "Nothing",
        "Wordpress",
        "Joomla",
        "Moodle"
      ],
      "defaultValue": "Wordpress",
      "metadata": {
        "description": "Choose one app to install, or choose Nothing to create a clear install."
      }
    },
    "PHPversion": {
      "type": "string",
      "allowedValues": [
        "5.6",
        "7.0"
      ],
      "defaultValue": "5.6",
      "metadata": {
        "description": "PHP version to run your app."
      }
    },
    "Project_Name": {
      "type": "string",
      "defaultValue": "WebAppPHP",
      "metadata": {
        "description": "(Short) Name for WebApp and Virtual Machine."
      }
    },
    "Minimum_Web_Instances": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "Minimum number of instances running on Web App."
      }
    },
    "Maximum_Web_Instances": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ],
      "defaultValue": "10",
      "metadata": {
        "description": "Maximum number of instances running on Web App."
      }
    },
    "workerSize": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0",
      "metadata": {
        "description": "The instance size of the hosting plan (small, medium, or large)."
      }
    },
    "webAppSvcPlanName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "AppSvcPlan",
      "metadata": {
        "description": "Name of AppSvc Plan."
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "defaultValue": "S1",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "dnsNameForPublicWebSite": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Globally unique DNS Name for the Public Web Site (webapp) used to create a URL."
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "14.04.4-LTS",
      "allowedValues": [
        "14.04.4-LTS",
        "16.04.0-LTS"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version and install Ngnx web server with PHP. Allowed values: 12.04.5-LTS, 14.04.2-LTS, 15.04."
      }
    },
    "mySQLrootPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password to MariaDB root access"
      }
    },
    "mySQLuserPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password to MariaDB user access (DataBase: webappdb / User: webappuser). Remember this password to install your application."
      }
    },
    "nodeDBCount": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ],
      "metadata": {
        "description": "Number of Virtual Machines for MariaDB."
      }
    },
    "vmDBSize": {
      "type": "string",
      "defaultValue": "Standard_D1_V2",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1_V2",
        "Standard_D2_V2",
        "Standard_D3_V2",
        "Standard_D4_V2",
        "Standard_D5_V2",
        "Standard_D11_V2",
        "Standard_D12_V2",
        "Standard_D13_V2",
        "Standard_D14_V2",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14"
      ],
      "metadata": {
        "description": "The size of each MariaDB front end VM."
      }
    }
  },
  "variables": {
    "subnetIPBase": "10.11.0.",
    "thresholdScaleUp": 80,
    "thresholdScaleDown": 40,

    "computeApiVersion": "2016-03-30",
    "storageApiVersion": "2015-06-15",
    "webApiVersion": "2015-08-01",
    "InsApiVersion": "2015-04-01",
    "artifactsPath": "https://raw.githubusercontent.com/juliosene/azure-webapp-php-mariadb/master",
    "webAppDBuser": "webappuser",
    "webAppDBname": "webappdb",
    "webAppDBpass": "[parameters('mySQLuserPassword')]",

    "AppServicePlanName": "[concat(parameters('Project_Name'),'-AppServ')]",

    "hostingPlanName": "[concat('hostingplan', uniqueString(resourceGroup().id))]",
    "webSiteName": "[concat('webSite', uniqueString(resourceGroup().id))]",

    "customScriptCommandToExecuteDB": "bash mariadb-galera-install.sh",
    "customScriptFilePathDB": "[concat(variables('artifactsPath'), '/mariadb-galera-install.sh')]",

    "dnsNameForPublicWebSite": "[tolower(parameters('dnsNameForPublicWebSite'))]",
    "dnsNameForMariaDB": "[concat('db', variables('dnsNameForPublicWebSite'))]",

    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "OSDiskName": "osdiskforlinuxsimple",
    "DataDiskName": "datakisklinux",
    "nicName": "[concat('App-', parameters('Project_Name'),'-Nic')]",
    "nicNameDB": "[concat('DB-', parameters('Project_Name'),'-Nic')]",
    "subnetName": "Subnet",

    "addressPrefix": "[concat(variables('subnetIPBase'),'0/24')]",
    "subnetPrefix": "[concat(variables('subnetIPBase'),'0/26')]",
    "subnetPrefix1": "[concat(variables('subnetIPBase'),'64/26')]",
    "subnetPrefix2": "[concat(variables('subnetIPBase'),'128/26')]",
    "subnetPrefix3": "[concat(variables('subnetIPBase'),'192/26')]",
    "vhdStorageType": "Standard_LRS",
    "vhdStorageContainerName": "osvhds",
    "availabilitySetName": "[concat('App-', parameters('Project_Name'), '-AvSet')]",
    "availabilitySetNameDB": "[concat('DB-', parameters('Project_Name'), '-AvSet')]",
    "nsgName": "[concat('App-', parameters('Project_Name'),'-NSG')]",
    "nsgNameDB": "[concat('DB-', parameters('Project_Name'),'-NSG')]",
    "lbName": "[concat('App-', parameters('Project_Name'),'-LB')]",
    "lbNameDB": "[concat('DB-',parameters('Project_Name'),'-LB')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "lbDBID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbNameDB'))]",
    "virtualNetworkName": "[concat(parameters('Project_Name'),'-VNet')]",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "gwName": "[concat('GW-',variables('virtualNetworkName'))]",
    "gwIPName": "[concat('IP-',variables('virtualNetworkName'))]",
    "subnetRefApp": "[concat(variables('vnetId'), '/subnets/App-', variables('subnetName'))]",
    "subnetRefDB": "[concat(variables('vnetId'), '/subnets/DB-', variables('subnetName'))]",
    "subnetRefGW": "[concat(variables('vnetId'), '/subnets/GatewaySubnet')]",
    "vhdStorageName": "[concat(tolower(substring(parameters('Project_Name'),0,3)), uniqueString(resourceGroup().id))]",
    "vhdDBStorageName": "[concat('db',variables('vhdStorageName'))]",
    "vmDBName": "[concat('DB-',parameters('Project_Name'))]",
    "WebAppName": "[concat('WebApp-',parameters('Project_Name'))]",
    "jobCollectionName": "[concat('JobCollection-',parameters('Project_Name'))]",
    "urlWordpress": "https://github.com/WordPress/WordPress.git",
    "urlJoomla": "https://github.com/joomla/joomla-cms.git",
    "urlMoodle": "https://github.com/moodle/moodle.git",
    "urlMagento": "https://github.com/magento/magento2.git",
    "urlDrupal": "https://github.com/drupal/drupal.git",
    "urlNothing": "https://github.com/juliosene/donothing.git",
    "branchWordpress": "master",
    "branchJoomla": "master",
    "branchMoodle": "master",
    "branchMagento": "2.0",
    "branchDrupal": "8.2.x",
    "branchNothing": "master",
    "repoUrl": "[variables(concat('url', parameters('AppToInstall')))]",
    "branch": "[variables(concat('branch', parameters('AppToInstall')))]",

    "storageAccountId": "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', variables('vhdDBStorageName'))]",

    "sshIPConfigName": "[concat(variables('dnsNameForMariaDB'), '-sshIPCfg')]",
    "sshIPConfig": "[concat(variables('lbID'),'/frontendIPConfigurations/',variables('sshIPConfigName'))]"
  },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('vhdDBStorageName')]",
        "apiVersion": "[variables('storageApiVersion')]",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "StorageAccountDB"
        },
        "properties": {
          "accountType": "[variables('vhdStorageType')]"
        }
      },
      {
        "apiVersion": "[variables('webApiVersion')]",
        "name": "[variables('AppServicePlanName')]",
        "type": "Microsoft.Web/serverfarms",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "[parameters('sku')]",
          "capacity": "[parameters('workerSize')]"
        },
        "properties": {
          "name": "[variables('AppServicePlanName')]"
        }
      },
      {
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[variables('availabilitySetNameDB')]",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "platformFaultDomainCount": "3",
          "platformUpdateDomainCount": "5"
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('gwIPName')]",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "[concat('VNet-',variables('virtualNetworkName'))]"
        },
        "properties": {
          "publicIPAllocationMethod": "Dynamic"
        }
      },
      {
        "name": "[variables('nsgName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "Network Security Group"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "securityRules": [
            {
              "name": "Web",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow Web Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "80",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "Tools",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow Web Access for Tools",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "8888",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "name": "[variables('nsgNameDB')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "Network Security Group"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "securityRules": [
            {
              "name": "WebApp",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow Web Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "3306",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 103,
                "direction": "Inbound"
              }
            },
            {
              "name": "MySQL",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow MySQL Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "3306",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "GaleraClusterRep",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow Gallera Replication Access",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "4567",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 101,
                "direction": "Inbound"
              }
            },
            {
              "name": "StateSnapshotTransfer",
              "properties": {
                "provisioningState": "Succeeded",
                "description": "Allow Snapshot Transfer Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "4444",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 102,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgNameDB'))]"
        ],
        "tags": {
          "displayName": "VirtualNetwork"
        },
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('addressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[concat('DB-',variables('subnetName'))]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgNameDB'))]"

                }
              }
            },
            {
              "name": "[concat('App-',variables('subnetName'))]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix1')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"

                }
              }
            },
            {
              "name": "[concat('Cache-',variables('subnetName'))]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix2')]"
              }
            },
            {
              "name": "GatewaySubnet",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix3')]"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "name": "[variables('gwName')]",
        "type": "Microsoft.Network/virtualNetworkGateways",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
          "[concat('Microsoft.Network/publicIPAddresses/', variables('gwIPName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "[concat(variables('gwName'),'ipconfig')]",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('gwIPName'))]"
                },
                "subnet": {
                  "id": "[variables('subnetRefGW')]"
                }
              }
            }
          ],
          "gatewayType": "Vpn",
          "vpnType": "RouteBased",
          "enableBgp": false,
          "vpnClientConfiguration": {
            "vpnClientAddressPool": {
              "addressPrefixes": [
                "172.16.0.0/16"
              ]
            }
          }
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Network/loadBalancers",
        "name": "[concat(variables('lbNameDB'))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "properties": {
                "subnet": {
                  "id": "[variables('subnetRefApp')]"
                },
                "privateIPAddress": "[concat(variables('subnetIPBase'),'70' )]",
                "privateIPAllocationMethod": "Static"
              },
              "name": "LoadBalancerFrontendInternal"
            }
          ],
          "backendAddressPools": [
            {
              "name": "BackendPool"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "MySQLRule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbNameDB')), '/frontendIpConfigurations/LoadBalancerFrontendInternal')]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbNameDB')), '/backendAddressPools/BackendPool')]"
                },
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbNameDB')), '/probes/MySQLProbe')]"
                },
                "protocol": "Tcp",
                "frontendPort": 3306,
                "backendPort": 3306,
                "idleTimeoutInMinutes": 15
              }
            }
          ],
          "probes": [
            {
              "properties": {
                "protocol": "Tcp",
                "port": 3306,
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              },
              "name": "MySQLProbe"
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicNameDB'), copyindex())]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nicLoop",
          "count": "[parameters('nodeDBCount')]"
        },
        "tags": {
          "displayName": "NetworkInterface"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgNameDB'))]",
          "[concat('Microsoft.Network/loadBalancers/', variables('lbNameDB'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat(variables('subnetIPBase'), add(copyindex(),10))]",
                "subnet": {
                  "id": "[variables('subnetRefDB')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[concat(variables('lbDBID'), '/backendAddressPools/BackendPool')]"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "name": "[concat(variables('vmDBName'), copyIndex())]",
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "virtualMachineLoop",
          "count": "[parameters('nodeDBCount')]"
        },
        "tags": {
          "displayName": "VirtualMachine"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetNameDB'))]",
          "[concat('Microsoft.Storage/storageAccounts/', variables('vhdDBStorageName'))]",
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameDB'), copyindex())]"
        ],
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetNameDB'))]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('vmDBSize')]"
          },
          "osProfile": {
            "computerName": "[variables('vmDBName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[parameters('ubuntuOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "osdisk",
              "vhd": {
                "uri": "[concat('http://', variables('vhdDBStorageName'),'.blob.core.windows.net/', variables('vhdStorageContainerName'), '/', variables('OSDiskName'), copyIndex(), '.vhd')]"
              },
              "caching": "ReadWrite",
              "createOption": "FromImage"
            },
            "dataDisks": [
              {
                "name": "datadisk1",
                "diskSizeGB": "1000",
                "lun": 0,
                "vhd": {
                  "uri": "[concat('http://', variables('vhdDBStorageName'),'.blob.core.windows.net/vm', copyIndex(), 'lun/', variables('DataDiskName'), '01.vhd')]"
                },
                "createOption": "Empty"
              },
              {
                "name": "datadisk2",
                "diskSizeGB": "1000",
                "lun": 1,
                "vhd": {
                  "uri": "[concat('http://', variables('vhdDBStorageName'),'.blob.core.windows.net/vm', copyIndex(), 'lun/', variables('DataDiskName'), '02.vhd')]"
                },
                "createOption": "Empty"
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNameDB'), copyindex()))]"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmDBName'), sub(parameters('nodeDBCount'),1), '/setupGaleraCluster')]",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmDBName'),sub(parameters('nodeDBCount'),1))]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.4",
          "settings": {
            "fileUris": [
              "[variables('customScriptFilePathDB')]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat(variables('customScriptCommandToExecuteDB'),' ', parameters('nodeDBCount'), ' ', parameters('mySQLrootPassword'),' ',variables('subnetIPBase'), ' ', parameters('mySQLuserPassword'))]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmDBName'), copyIndex(), '/setupGaleraCluster')]",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "virtualMachineExtLoop",
          "count": "[sub(parameters('nodeDBCount'),1)]"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmDBName'),copyIndex())]",
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmDBName'),sub(parameters('nodeDBCount'),1),'/extensions/setupGaleraCluster')]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.4",
          "settings": {
            "fileUris": [
              "[variables('customScriptFilePathDB')]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat(variables('customScriptCommandToExecuteDB'),' ', parameters('nodeDBCount'), ' ', parameters('mySQLrootPassword'),' ',variables('subnetIPBase'))]"
          }
        }
      },
      {
        "apiVersion": "[variables('webApiVersion')]",
        "name": "[variables('dnsNameForPublicWebSite')]",
        "type": "Microsoft.Web/sites",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]"
        ],
        "properties": {
          "serverFarmId": "[variables('AppServicePlanName')]"
        },
        "resources": [
          {
            "apiVersion": "[variables('webApiVersion')]",
            "name": "web",
            "type": "sourcecontrols",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites', variables('dnsNameForPublicWebSite'))]"
            ],
            "properties": {
              "RepoUrl": "[variables('repoUrl')]",
              "branch": "[variables('branch')]",
              "IsManualIntegration": true
            }
          },
          {
            "apiVersion": "[variables('webApiVersion')]",
            "name": "web",
            "type": "config",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites',variables('dnsNameForPublicWebSite'))]"
            ],
            "properties": {
              "use32BitWorkerProcess": false,
              "phpVersion": "[parameters('PHPversion')]",
              "alwaysOn": true,
              "defaultDocuments": [
                "index.htm",
                "index.html",
                "index.php"
              ],
              "vnetName": "[variables('virtualNetworkName')]"
            }
          },
          {
            "apiVersion": "[variables('webApiVersion')]",
            "name": "connectionstrings",
            "type": "config",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites', variables('dnsNameForPublicWebSite'))]"
            ],
            "properties": {
              "mariadb": {
                "value": "[concat('Server=', variables('subnetIPBase'),'70;Database=', variables('webAppDBname'),';Uid=', variables('webAppDBuser'),';Pwd=', variables('webAppDBpass'),';')]",
                "type": "MySql"
              }
            }
          },
          {
            "apiVersion": "[variables('webApiVersion')]",
            "name": "[variables('virtualNetworkName')]",
            "type": "virtualNetworkConnections",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites', variables('dnsNameForPublicWebSite'))]",
              "[resourceId('Microsoft.Network/virtualNetworkGateways', variables('gwName'))]"
            ],
            "properties": {
              "vnetResourceId": "[variables('vnetId')]"
            }
          }
        ]
      },
      {
        "apiVersion": "[variables('InsApiVersion')]",
        "name": "[concat(parameters('Project_Name'),'-AutoScale')]",
        "type": "Microsoft.Insights/autoscaleSettings",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]"
        ],
        "properties": {
          "profiles": [
            {
              "name": "CPU",
              "capacity": {
                "minimum": "[parameters('Minimum_Web_Instances')]",
                "maximum": "[parameters('Maximum_Web_Instances')]",
                "default": "[parameters('Minimum_Web_Instances')]"
              },
              "rules": [
                {
                  "metricTrigger": {
                    "metricName": "CpuPercentage",
                    "metricNamespace": "",
                    "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "GreaterThan",
                    "threshold": "[ variables('thresholdScaleUp') ]"
                  },
                  "scaleAction": {
                    "direction": "Increase",
                    "type": "ChangeCount",
                    "value": "2",
                    "cooldown": "PT5M"
                  }
                },
                {
                  "metricTrigger": {
                    "metricName": "CpuPercentage",
                    "metricNamespace": "",
                    "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "LessThan",
                    "threshold": "[ variables('thresholdScaleDown') ]"
                  },
                  "scaleAction": {
                    "direction": "Decrease",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT5M"
                  }
                }
              ]
            }
          ],
          "enabled": true,
          "name": "[concat(parameters('Project_Name'),'-AutoScale')]",
          "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]",
          "notifications": [
            {
              "operation": "Scale",
              "email": {
                "sendToSubscriptionAdministrator": false,
                "sendToSubscriptionCoAdministrators": false,
                "customEmails": [ ]
              },
              "webhooks": null
            }
          ]
        }
      }
    ]
  }
